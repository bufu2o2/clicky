{"version":3,"sources":["img/pikachu.png","img/bulbasaur.png","img/charmander.png","img/crocadile.png","img/eevee.png","img/flareon.png","img/gengar.png","img/jigglypuff.png","img/jolteon.png","img/pichu.png","img/snorlax.png","img/squirtle.png","top.js","main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Top","_ref","cScore","tScore","answer","react_default","a","createElement","className","href","Main","cAction","item","Fragment","onClick","value","src","alt","App","pkmonArr","bulbasaur","charmander","crocadile","eevee","flareon","gengar","jigglypuff","jolteon","pichu","pikachu","snorlax","squirtle","displayArr","_useState","useState","_useState2","Object","slicedToArray","currentStart","currentAddOne","_useState3","_useState4","topStart","topNew","_useState5","_useState6","setAnswer","_useState7","_useState8","selectedArr","setSelectedArr","updateAnswer","x","clearSelectedArr","pushSelectedArr","concat","toConsumableArray","btnAction","e","target","length","indexOf","console","log","aCheck","src_top","sort","Math","random","map","val","main","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e520ca2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pikachu.76f027c1.png\";","module.exports = __webpack_public_path__ + \"static/media/bulbasaur.25e30940.png\";","module.exports = __webpack_public_path__ + \"static/media/charmander.18032727.png\";","module.exports = __webpack_public_path__ + \"static/media/crocadile.654826f0.png\";","module.exports = __webpack_public_path__ + \"static/media/eevee.e68954dc.png\";","module.exports = __webpack_public_path__ + \"static/media/flareon.824cf908.png\";","module.exports = __webpack_public_path__ + \"static/media/gengar.4ceb37e7.png\";","module.exports = __webpack_public_path__ + \"static/media/jigglypuff.dce766b1.png\";","module.exports = __webpack_public_path__ + \"static/media/jolteon.70eb8b25.png\";","module.exports = __webpack_public_path__ + \"static/media/pichu.2a2e05ac.png\";","module.exports = __webpack_public_path__ + \"static/media/snorlax.9b400fcb.png\";","module.exports = __webpack_public_path__ + \"static/media/squirtle.aef36912.png\";","import React from 'react';\r\n\r\n\r\nfunction Top ({cScore, tScore, answer}) {\r\n\r\n\r\n    return (\r\n        <div className = 'topBar'>\r\n            <div className = 'left'>\r\n                <a href = '/'><h3>Home</h3></a>\r\n            </div>\r\n            <div className = 'middle'>\r\n                <h3>\r\n                {cScore} : Your Score | Top Score : {tScore}\r\n                </h3>\r\n            </div>\r\n            <div className = 'right'>\r\n                <h5 className = {(answer === 'You Lose') ? 'redAnswer' : 'regAnswer'}>\r\n                    {answer}\r\n                </h5>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    \r\n    )\r\n\r\n}\r\n\r\nexport default Top;","import React from 'react';\r\n\r\n\r\n\r\nfunction Main({cAction, item}) {\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <button onClick = {cAction} className = 'clickyBtn' value = {item}> <img className = 'clickyImg' src = {item} alt = {item} /> </button>\r\n        </React.Fragment>\r\n       \r\n    )\r\n\r\n}\r\n\r\nexport default Main;","import React, {useState} from 'react';\nimport Top from './top';\nimport Main from './main';\nimport './App.css'\nimport pikachu from './img/pikachu.png';\nimport bulbasaur from './img/bulbasaur.png';\nimport charmander from './img/charmander.png';\nimport crocadile from './img/crocadile.png';\nimport eevee from './img/eevee.png';\nimport flareon from './img/flareon.png';\nimport gengar from './img/gengar.png';\nimport jigglypuff from './img/jigglypuff.png';\nimport jolteon from './img/jolteon.png';\nimport pichu from './img/pichu.png';\nimport snorlax from './img/snorlax.png';\nimport squirtle from './img/squirtle.png';\n\n\n\nfunction App() {\n  let pkmonArr = [bulbasaur, charmander, crocadile, eevee, flareon, gengar, jigglypuff, jolteon, pichu, pikachu, snorlax, squirtle];\n  let displayArr = [];\n  const shuffle = arr => {\n    displayArr = arr.sort(() => Math.random() - 0.5);\n  }\n\n\n  //States\n  const [currentStart, currentAddOne] = useState(0);\n  const [topStart, topNew] = useState(0);\n  const [answer, setAnswer] = useState('');\n  const [selectedArr, setSelectedArr] = useState([]);\n\n  const cAdd = () => {\n    currentAddOne(currentStart + 1);\n  }\n  const cCheck = () => {\n    if(topStart <= currentStart + 1){\n      topNew(currentStart +1);\n    }\n  }\n\n  const updateAnswer = (x) => {\n    if(x){\n      setAnswer('You Win');\n    }\n    else{\n      setAnswer('You Lose');\n      clearSelectedArr();\n    }\n  }\n\n  const clearSelectedArr = () => {\n    setSelectedArr([]);\n  }\n\n  const pushSelectedArr = x => {\n    setSelectedArr(() => [...selectedArr, x]);\n  }\n\n  // console.log(` this is the selected Arr: ${selectedArr} \n  //  this is the selected Arr Length: ${selectedArr.length}`);\n  \n\n  const aCheck = (src) => {\n    // console.log('aCheck() was fired');\n    if(selectedArr.length > 0){\n      let find = selectedArr.indexOf(src);\n      // console.log(`${src}\n      // inside of aCheck, this is what we found: ${find}`);\n      if(find === 0){\n        console.log('you lose!!!!!!');\n        updateAnswer(false);\n        clearSelectedArr();\n        currentAddOne(0);\n      }\n      else{\n        console.log('YOU WIN!!!!');\n        updateAnswer(true);\n        pushSelectedArr(src);\n      }\n\n    }\n    else{\n      pushSelectedArr(src);\n      setAnswer();\n      // console.log(`selectedArr added ${src}`);\n    }\n\n    \n  }\n\n  const btnAction = (e) => {\n    let src = e.target.src;\n    cAdd();\n    cCheck();\n    aCheck(src);\n  }\n\n\n\nreturn (\n  <div>\n  <Top cScore = {currentStart} tScore = {topStart} answer = {answer}/>\n    <div className = 'btnGrid'>\n      {shuffle(pkmonArr)}\n      {displayArr.map((val) => {\n        return <Main key = {val} cAction = {btnAction} item = {val} />\n      })}\n    </div>\n  \n\n  </div>\n\n)\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}